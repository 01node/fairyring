// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/common/shared_types.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRequestAggrKeyshare defines a struct for the data payload
type MsgRequestAggrKeyshare struct {
	// Types that are valid to be assigned to Id:
	//
	//	*MsgRequestAggrKeyshare_ProposalId
	//	*MsgRequestAggrKeyshare_RequestId
	Id isMsgRequestAggrKeyshare_Id `protobuf_oneof:"id"`
}

func (m *MsgRequestAggrKeyshare) Reset()         { *m = MsgRequestAggrKeyshare{} }
func (m *MsgRequestAggrKeyshare) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAggrKeyshare) ProtoMessage()    {}
func (*MsgRequestAggrKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{0}
}
func (m *MsgRequestAggrKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAggrKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAggrKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAggrKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAggrKeyshare.Merge(m, src)
}
func (m *MsgRequestAggrKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAggrKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAggrKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAggrKeyshare proto.InternalMessageInfo

type isMsgRequestAggrKeyshare_Id interface {
	isMsgRequestAggrKeyshare_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgRequestAggrKeyshare_ProposalId struct {
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3,oneof" json:"proposal_id,omitempty"`
}
type MsgRequestAggrKeyshare_RequestId struct {
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (*MsgRequestAggrKeyshare_ProposalId) isMsgRequestAggrKeyshare_Id() {}
func (*MsgRequestAggrKeyshare_RequestId) isMsgRequestAggrKeyshare_Id()  {}

func (m *MsgRequestAggrKeyshare) GetId() isMsgRequestAggrKeyshare_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MsgRequestAggrKeyshare) GetProposalId() string {
	if x, ok := m.GetId().(*MsgRequestAggrKeyshare_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (m *MsgRequestAggrKeyshare) GetRequestId() string {
	if x, ok := m.GetId().(*MsgRequestAggrKeyshare_RequestId); ok {
		return x.RequestId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgRequestAggrKeyshare) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgRequestAggrKeyshare_ProposalId)(nil),
		(*MsgRequestAggrKeyshare_RequestId)(nil),
	}
}

type MsgRequestAggrKeyshareResponse struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgRequestAggrKeyshareResponse) Reset()         { *m = MsgRequestAggrKeyshareResponse{} }
func (m *MsgRequestAggrKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAggrKeyshareResponse) ProtoMessage()    {}
func (*MsgRequestAggrKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{1}
}
func (m *MsgRequestAggrKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAggrKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAggrKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAggrKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAggrKeyshareResponse.Merge(m, src)
}
func (m *MsgRequestAggrKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAggrKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAggrKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAggrKeyshareResponse proto.InternalMessageInfo

func (m *MsgRequestAggrKeyshareResponse) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *MsgRequestAggrKeyshareResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// MsgGetAggrKeyshare defines a struct for the data payload
type MsgGetAggrKeyshare struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *MsgGetAggrKeyshare) Reset()         { *m = MsgGetAggrKeyshare{} }
func (m *MsgGetAggrKeyshare) String() string { return proto.CompactTextString(m) }
func (*MsgGetAggrKeyshare) ProtoMessage()    {}
func (*MsgGetAggrKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{2}
}
func (m *MsgGetAggrKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetAggrKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetAggrKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetAggrKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetAggrKeyshare.Merge(m, src)
}
func (m *MsgGetAggrKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetAggrKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetAggrKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetAggrKeyshare proto.InternalMessageInfo

func (m *MsgGetAggrKeyshare) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type MsgGetAggrKeyshareResponse struct {
}

func (m *MsgGetAggrKeyshareResponse) Reset()         { *m = MsgGetAggrKeyshareResponse{} }
func (m *MsgGetAggrKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGetAggrKeyshareResponse) ProtoMessage()    {}
func (*MsgGetAggrKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{3}
}
func (m *MsgGetAggrKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGetAggrKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGetAggrKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGetAggrKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGetAggrKeyshareResponse.Merge(m, src)
}
func (m *MsgGetAggrKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGetAggrKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGetAggrKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGetAggrKeyshareResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRequestAggrKeyshare)(nil), "fairyring.common.MsgRequestAggrKeyshare")
	proto.RegisterType((*MsgRequestAggrKeyshareResponse)(nil), "fairyring.common.MsgRequestAggrKeyshareResponse")
	proto.RegisterType((*MsgGetAggrKeyshare)(nil), "fairyring.common.MsgGetAggrKeyshare")
	proto.RegisterType((*MsgGetAggrKeyshareResponse)(nil), "fairyring.common.MsgGetAggrKeyshareResponse")
}

func init() {
	proto.RegisterFile("fairyring/common/shared_types.proto", fileDescriptor_b708507d1b3951ff)
}

var fileDescriptor_b708507d1b3951ff = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x4b, 0xcc, 0x2c,
	0xaa, 0x2c, 0xca, 0xcc, 0x4b, 0xd7, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2f, 0xce, 0x48,
	0x2c, 0x4a, 0x4d, 0x89, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x80, 0x2b, 0xd2, 0x83, 0x28, 0x52, 0x4a, 0xe2, 0x12, 0xf3, 0x2d, 0x4e, 0x0f, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x71, 0x4c, 0x4f, 0x2f, 0xf2, 0x4e, 0xad, 0x04, 0x6b, 0x14, 0x52, 0xe4,
	0xe2, 0x2e, 0x28, 0xca, 0x2f, 0xc8, 0x2f, 0x4e, 0xcc, 0x89, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0xf4, 0x60, 0x08, 0xe2, 0x82, 0x09, 0x7a, 0xa6, 0x08, 0xc9, 0x73, 0x71, 0x15, 0x41,
	0x74, 0x82, 0x54, 0x30, 0x41, 0x55, 0x70, 0x42, 0xc5, 0x3c, 0x53, 0x9c, 0x58, 0xb8, 0x98, 0x32,
	0x53, 0x94, 0x42, 0xb8, 0xe4, 0xb0, 0xdb, 0x11, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a,
	0x24, 0xc5, 0xc5, 0x91, 0x99, 0x92, 0x9a, 0x57, 0x92, 0x59, 0x52, 0x09, 0xb1, 0x28, 0x08, 0xce,
	0x17, 0x12, 0xe3, 0x62, 0x2b, 0x28, 0x4d, 0xca, 0x4e, 0xad, 0x84, 0x58, 0x10, 0x04, 0xe5, 0x29,
	0x19, 0x70, 0x09, 0xf9, 0x16, 0xa7, 0xbb, 0xa7, 0xa2, 0xba, 0x1a, 0x8f, 0x49, 0x4a, 0x32, 0x5c,
	0x52, 0x98, 0x3a, 0x60, 0x6e, 0x70, 0x32, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x09, 0x44, 0xd0, 0x56, 0xc0, 0x02, 0x17, 0x1c, 0xaa, 0x49, 0x6c, 0xe0, 0x60, 0x35,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xa4, 0x87, 0xa1, 0x7d, 0x01, 0x00, 0x00,
}

func (m *MsgRequestAggrKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAggrKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAggrKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestAggrKeyshare_ProposalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAggrKeyshare_ProposalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProposalId)
	copy(dAtA[i:], m.ProposalId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.ProposalId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *MsgRequestAggrKeyshare_RequestId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAggrKeyshare_RequestId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RequestId)
	copy(dAtA[i:], m.RequestId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.RequestId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *MsgRequestAggrKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAggrKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAggrKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetAggrKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetAggrKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetAggrKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGetAggrKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGetAggrKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGetAggrKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSharedTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSharedTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRequestAggrKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	return n
}

func (m *MsgRequestAggrKeyshare_ProposalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *MsgRequestAggrKeyshare_RequestId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *MsgRequestAggrKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *MsgGetAggrKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *MsgGetAggrKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSharedTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSharedTypes(x uint64) (n int) {
	return sovSharedTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRequestAggrKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAggrKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAggrKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &MsgRequestAggrKeyshare_ProposalId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &MsgRequestAggrKeyshare_RequestId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestAggrKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAggrKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAggrKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetAggrKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetAggrKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetAggrKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGetAggrKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGetAggrKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGetAggrKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSharedTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSharedTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSharedTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSharedTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSharedTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSharedTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSharedTypes = fmt.Errorf("proto: unexpected end of group")
)
