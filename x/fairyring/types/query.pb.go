// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/fairyring/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetValidatorSetRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetValidatorSetRequest) Reset()         { *m = QueryGetValidatorSetRequest{} }
func (m *QueryGetValidatorSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorSetRequest) ProtoMessage()    {}
func (*QueryGetValidatorSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{2}
}
func (m *QueryGetValidatorSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorSetRequest.Merge(m, src)
}
func (m *QueryGetValidatorSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorSetRequest proto.InternalMessageInfo

func (m *QueryGetValidatorSetRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetValidatorSetResponse struct {
	ValidatorSet ValidatorSet `protobuf:"bytes,1,opt,name=validatorSet,proto3" json:"validatorSet"`
}

func (m *QueryGetValidatorSetResponse) Reset()         { *m = QueryGetValidatorSetResponse{} }
func (m *QueryGetValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorSetResponse) ProtoMessage()    {}
func (*QueryGetValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{3}
}
func (m *QueryGetValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorSetResponse.Merge(m, src)
}
func (m *QueryGetValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorSetResponse proto.InternalMessageInfo

func (m *QueryGetValidatorSetResponse) GetValidatorSet() ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return ValidatorSet{}
}

type QueryAllValidatorSetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorSetRequest) Reset()         { *m = QueryAllValidatorSetRequest{} }
func (m *QueryAllValidatorSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorSetRequest) ProtoMessage()    {}
func (*QueryAllValidatorSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{4}
}
func (m *QueryAllValidatorSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorSetRequest.Merge(m, src)
}
func (m *QueryAllValidatorSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorSetRequest proto.InternalMessageInfo

func (m *QueryAllValidatorSetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidatorSetResponse struct {
	ValidatorSet []ValidatorSet      `protobuf:"bytes,1,rep,name=validatorSet,proto3" json:"validatorSet"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorSetResponse) Reset()         { *m = QueryAllValidatorSetResponse{} }
func (m *QueryAllValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorSetResponse) ProtoMessage()    {}
func (*QueryAllValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{5}
}
func (m *QueryAllValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorSetResponse.Merge(m, src)
}
func (m *QueryAllValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorSetResponse proto.InternalMessageInfo

func (m *QueryAllValidatorSetResponse) GetValidatorSet() []ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *QueryAllValidatorSetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKeyShareRequest struct {
	Validator   string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	BlockHeight uint64 `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *QueryGetKeyShareRequest) Reset()         { *m = QueryGetKeyShareRequest{} }
func (m *QueryGetKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeyShareRequest) ProtoMessage()    {}
func (*QueryGetKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{6}
}
func (m *QueryGetKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeyShareRequest.Merge(m, src)
}
func (m *QueryGetKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeyShareRequest proto.InternalMessageInfo

func (m *QueryGetKeyShareRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryGetKeyShareRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryGetKeyShareResponse struct {
	KeyShare KeyShare `protobuf:"bytes,1,opt,name=keyShare,proto3" json:"keyShare"`
}

func (m *QueryGetKeyShareResponse) Reset()         { *m = QueryGetKeyShareResponse{} }
func (m *QueryGetKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeyShareResponse) ProtoMessage()    {}
func (*QueryGetKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{7}
}
func (m *QueryGetKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeyShareResponse.Merge(m, src)
}
func (m *QueryGetKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeyShareResponse proto.InternalMessageInfo

func (m *QueryGetKeyShareResponse) GetKeyShare() KeyShare {
	if m != nil {
		return m.KeyShare
	}
	return KeyShare{}
}

type QueryAllKeyShareRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeyShareRequest) Reset()         { *m = QueryAllKeyShareRequest{} }
func (m *QueryAllKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeyShareRequest) ProtoMessage()    {}
func (*QueryAllKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{8}
}
func (m *QueryAllKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeyShareRequest.Merge(m, src)
}
func (m *QueryAllKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeyShareRequest proto.InternalMessageInfo

func (m *QueryAllKeyShareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKeyShareResponse struct {
	KeyShare   []KeyShare          `protobuf:"bytes,1,rep,name=keyShare,proto3" json:"keyShare"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeyShareResponse) Reset()         { *m = QueryAllKeyShareResponse{} }
func (m *QueryAllKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeyShareResponse) ProtoMessage()    {}
func (*QueryAllKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{9}
}
func (m *QueryAllKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeyShareResponse.Merge(m, src)
}
func (m *QueryAllKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeyShareResponse proto.InternalMessageInfo

func (m *QueryAllKeyShareResponse) GetKeyShare() []KeyShare {
	if m != nil {
		return m.KeyShare
	}
	return nil
}

func (m *QueryAllKeyShareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetAggregatedKeyShareRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetAggregatedKeyShareRequest) Reset()         { *m = QueryGetAggregatedKeyShareRequest{} }
func (m *QueryGetAggregatedKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAggregatedKeyShareRequest) ProtoMessage()    {}
func (*QueryGetAggregatedKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{10}
}
func (m *QueryGetAggregatedKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregatedKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregatedKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregatedKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregatedKeyShareRequest.Merge(m, src)
}
func (m *QueryGetAggregatedKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregatedKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregatedKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregatedKeyShareRequest proto.InternalMessageInfo

func (m *QueryGetAggregatedKeyShareRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetAggregatedKeyShareResponse struct {
	AggregatedKeyShare AggregatedKeyShare `protobuf:"bytes,1,opt,name=aggregatedKeyShare,proto3" json:"aggregatedKeyShare"`
}

func (m *QueryGetAggregatedKeyShareResponse) Reset()         { *m = QueryGetAggregatedKeyShareResponse{} }
func (m *QueryGetAggregatedKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAggregatedKeyShareResponse) ProtoMessage()    {}
func (*QueryGetAggregatedKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{11}
}
func (m *QueryGetAggregatedKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAggregatedKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAggregatedKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAggregatedKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAggregatedKeyShareResponse.Merge(m, src)
}
func (m *QueryGetAggregatedKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAggregatedKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAggregatedKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAggregatedKeyShareResponse proto.InternalMessageInfo

func (m *QueryGetAggregatedKeyShareResponse) GetAggregatedKeyShare() AggregatedKeyShare {
	if m != nil {
		return m.AggregatedKeyShare
	}
	return AggregatedKeyShare{}
}

type QueryAllAggregatedKeyShareRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAggregatedKeyShareRequest) Reset()         { *m = QueryAllAggregatedKeyShareRequest{} }
func (m *QueryAllAggregatedKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAggregatedKeyShareRequest) ProtoMessage()    {}
func (*QueryAllAggregatedKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{12}
}
func (m *QueryAllAggregatedKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAggregatedKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAggregatedKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAggregatedKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAggregatedKeyShareRequest.Merge(m, src)
}
func (m *QueryAllAggregatedKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAggregatedKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAggregatedKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAggregatedKeyShareRequest proto.InternalMessageInfo

func (m *QueryAllAggregatedKeyShareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAggregatedKeyShareResponse struct {
	AggregatedKeyShare []AggregatedKeyShare `protobuf:"bytes,1,rep,name=aggregatedKeyShare,proto3" json:"aggregatedKeyShare"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAggregatedKeyShareResponse) Reset()         { *m = QueryAllAggregatedKeyShareResponse{} }
func (m *QueryAllAggregatedKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAggregatedKeyShareResponse) ProtoMessage()    {}
func (*QueryAllAggregatedKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91b6f1584d7e828, []int{13}
}
func (m *QueryAllAggregatedKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAggregatedKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAggregatedKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAggregatedKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAggregatedKeyShareResponse.Merge(m, src)
}
func (m *QueryAllAggregatedKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAggregatedKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAggregatedKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAggregatedKeyShareResponse proto.InternalMessageInfo

func (m *QueryAllAggregatedKeyShareResponse) GetAggregatedKeyShare() []AggregatedKeyShare {
	if m != nil {
		return m.AggregatedKeyShare
	}
	return nil
}

func (m *QueryAllAggregatedKeyShareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fairyring.fairyring.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fairyring.fairyring.QueryParamsResponse")
	proto.RegisterType((*QueryGetValidatorSetRequest)(nil), "fairyring.fairyring.QueryGetValidatorSetRequest")
	proto.RegisterType((*QueryGetValidatorSetResponse)(nil), "fairyring.fairyring.QueryGetValidatorSetResponse")
	proto.RegisterType((*QueryAllValidatorSetRequest)(nil), "fairyring.fairyring.QueryAllValidatorSetRequest")
	proto.RegisterType((*QueryAllValidatorSetResponse)(nil), "fairyring.fairyring.QueryAllValidatorSetResponse")
	proto.RegisterType((*QueryGetKeyShareRequest)(nil), "fairyring.fairyring.QueryGetKeyShareRequest")
	proto.RegisterType((*QueryGetKeyShareResponse)(nil), "fairyring.fairyring.QueryGetKeyShareResponse")
	proto.RegisterType((*QueryAllKeyShareRequest)(nil), "fairyring.fairyring.QueryAllKeyShareRequest")
	proto.RegisterType((*QueryAllKeyShareResponse)(nil), "fairyring.fairyring.QueryAllKeyShareResponse")
	proto.RegisterType((*QueryGetAggregatedKeyShareRequest)(nil), "fairyring.fairyring.QueryGetAggregatedKeyShareRequest")
	proto.RegisterType((*QueryGetAggregatedKeyShareResponse)(nil), "fairyring.fairyring.QueryGetAggregatedKeyShareResponse")
	proto.RegisterType((*QueryAllAggregatedKeyShareRequest)(nil), "fairyring.fairyring.QueryAllAggregatedKeyShareRequest")
	proto.RegisterType((*QueryAllAggregatedKeyShareResponse)(nil), "fairyring.fairyring.QueryAllAggregatedKeyShareResponse")
}

func init() { proto.RegisterFile("fairyring/fairyring/query.proto", fileDescriptor_e91b6f1584d7e828) }

var fileDescriptor_e91b6f1584d7e828 = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0x13, 0x4d,
	0x18, 0xc7, 0x3b, 0xfc, 0x68, 0x60, 0x20, 0x79, 0x93, 0x81, 0xf7, 0x7d, 0x49, 0x0b, 0xa5, 0x0c,
	0x6f, 0x80, 0x17, 0x71, 0xc7, 0x16, 0x45, 0xc5, 0x83, 0x96, 0x83, 0x98, 0x70, 0xc1, 0x92, 0x98,
	0xa8, 0x31, 0x64, 0x0a, 0xe3, 0x76, 0xd3, 0xa5, 0x5b, 0x76, 0x17, 0x42, 0xd3, 0x90, 0x18, 0xfd,
	0x07, 0x8c, 0x5e, 0x3d, 0x19, 0x13, 0xe3, 0xdd, 0x9b, 0x27, 0x6f, 0x1c, 0x3c, 0x90, 0x78, 0xf1,
	0x64, 0x0c, 0xf8, 0x87, 0x98, 0xce, 0x3e, 0xdb, 0x6e, 0xdb, 0xe9, 0x96, 0x92, 0xde, 0xb6, 0xb3,
	0xcf, 0x8f, 0xcf, 0xf7, 0xfb, 0x4c, 0x67, 0x16, 0x4f, 0x3f, 0xe7, 0x86, 0x5d, 0xb6, 0x8d, 0xa2,
	0xce, 0xea, 0x4f, 0xfb, 0x07, 0xc2, 0x2e, 0x6b, 0x25, 0xdb, 0x72, 0x2d, 0x32, 0x56, 0x5b, 0xd6,
	0x6a, 0x4f, 0xb1, 0x71, 0xdd, 0xd2, 0x2d, 0xf9, 0x9e, 0x55, 0x9f, 0xbc, 0xd0, 0xd8, 0xa4, 0x6e,
	0x59, 0xba, 0x29, 0x18, 0x2f, 0x19, 0x8c, 0x17, 0x8b, 0x96, 0xcb, 0x5d, 0xc3, 0x2a, 0x3a, 0xf0,
	0x76, 0x71, 0xc7, 0x72, 0xf6, 0x2c, 0x87, 0xe5, 0xb8, 0x23, 0xbc, 0x0e, 0xec, 0x30, 0x95, 0x13,
	0x2e, 0x4f, 0xb1, 0x12, 0xd7, 0x8d, 0xa2, 0x0c, 0x86, 0xd8, 0xa4, 0x8a, 0xaa, 0xc4, 0x6d, 0xbe,
	0xe7, 0x57, 0x9b, 0x57, 0x45, 0x1c, 0x72, 0xd3, 0xd8, 0xe5, 0xae, 0x65, 0x6f, 0x3b, 0xc2, 0x85,
	0xc0, 0x59, 0x55, 0x60, 0x41, 0x94, 0xb7, 0x9d, 0x3c, 0xb7, 0x05, 0x04, 0x69, 0xaa, 0x20, 0xae,
	0xeb, 0xb6, 0xd0, 0xb9, 0x2b, 0x76, 0xb7, 0x9b, 0xe2, 0xe9, 0x38, 0x26, 0x0f, 0xab, 0x0a, 0x36,
	0x25, 0x52, 0x56, 0xec, 0x1f, 0x08, 0xc7, 0xa5, 0x9b, 0x78, 0xac, 0x61, 0xd5, 0x29, 0x59, 0x45,
	0x47, 0x90, 0xdb, 0x38, 0xea, 0xa1, 0x4f, 0xa0, 0x24, 0x5a, 0x18, 0x49, 0xc7, 0x35, 0x85, 0xa5,
	0x9a, 0x97, 0xb4, 0x36, 0x70, 0xf2, 0x73, 0x3a, 0x92, 0x85, 0x04, 0xba, 0x8c, 0xe3, 0xb2, 0xe2,
	0xba, 0x70, 0x1f, 0xf9, 0xda, 0xb6, 0x84, 0x0b, 0x0d, 0xc9, 0x38, 0x1e, 0x34, 0x8a, 0xbb, 0xe2,
	0x48, 0x16, 0x1e, 0xce, 0x7a, 0x3f, 0x68, 0x01, 0x4f, 0xaa, 0x93, 0x80, 0x67, 0x03, 0x8f, 0x1e,
	0x06, 0xd6, 0x81, 0x6a, 0x46, 0x49, 0x15, 0x2c, 0x00, 0x6c, 0x0d, 0xc9, 0x54, 0x00, 0x61, 0xc6,
	0x34, 0x55, 0x84, 0xf7, 0x31, 0xae, 0x0f, 0x17, 0x3a, 0xcd, 0x69, 0xde, 0x4e, 0xd0, 0xaa, 0x3b,
	0x41, 0xf3, 0xf6, 0x1a, 0xec, 0x04, 0x6d, 0x93, 0xeb, 0x02, 0x72, 0xb3, 0x81, 0x4c, 0xfa, 0x19,
	0x81, 0xa8, 0x96, 0x3e, 0x6d, 0x45, 0xf5, 0x5f, 0x5a, 0x14, 0x59, 0x6f, 0xa0, 0xee, 0x93, 0xd4,
	0xf3, 0x1d, 0xa9, 0x3d, 0x92, 0x06, 0xec, 0xc7, 0xf8, 0x5f, 0x7f, 0x14, 0x1b, 0xa2, 0xbc, 0x55,
	0xdd, 0x41, 0xbe, 0x33, 0x93, 0x78, 0xb8, 0xd6, 0x13, 0xe6, 0x57, 0x5f, 0x20, 0x49, 0x3c, 0x92,
	0x33, 0xad, 0x9d, 0xc2, 0x03, 0x61, 0xe8, 0x79, 0x57, 0x22, 0x0c, 0x64, 0x83, 0x4b, 0xf4, 0x29,
	0x9e, 0x68, 0x2d, 0x0d, 0x66, 0xdc, 0xc5, 0x43, 0x05, 0x58, 0x03, 0xcf, 0xa7, 0x94, 0x46, 0xf8,
	0x89, 0x60, 0x42, 0x2d, 0x89, 0x72, 0xe0, 0xce, 0x98, 0x66, 0x33, 0x77, 0xaf, 0x26, 0xfa, 0x01,
	0x81, 0x80, 0x86, 0x1e, 0x4a, 0x01, 0xfd, 0x5d, 0x0b, 0xe8, 0xdd, 0x04, 0xef, 0xe0, 0x19, 0xdf,
	0xe6, 0x4c, 0xed, 0x3c, 0x68, 0xf6, 0xe4, 0x1f, 0x1c, 0xcd, 0x7b, 0x83, 0x42, 0x72, 0x50, 0xf0,
	0x8b, 0xbe, 0x42, 0x98, 0x86, 0x65, 0x83, 0xda, 0x67, 0x98, 0xf0, 0x96, 0xb7, 0x60, 0xed, 0xbc,
	0x52, 0x77, 0x6b, 0x31, 0x70, 0x40, 0x51, 0x88, 0x16, 0x40, 0x42, 0xc6, 0x34, 0xdb, 0x4b, 0xe8,
	0xd5, 0x58, 0xbf, 0xf9, 0x92, 0xdb, 0x74, 0xeb, 0x20, 0xb9, 0xbf, 0x27, 0x92, 0x7b, 0x36, 0xfe,
	0xf4, 0xbb, 0x61, 0x3c, 0x28, 0xe5, 0x90, 0x17, 0x08, 0x47, 0xbd, 0x33, 0x9a, 0xa8, 0x01, 0x5b,
	0x2f, 0x84, 0xd8, 0x42, 0xe7, 0x40, 0xaf, 0x27, 0x9d, 0x7d, 0xf9, 0xfd, 0xf7, 0xdb, 0xbe, 0x29,
	0x12, 0x67, 0xed, 0x6f, 0x3e, 0xf2, 0x11, 0xe1, 0xd1, 0xe0, 0xd9, 0x45, 0xae, 0xb5, 0xaf, 0xaf,
	0xbe, 0x31, 0x62, 0xa9, 0x2e, 0x32, 0x00, 0x2d, 0x2d, 0xd1, 0x96, 0xc8, 0x22, 0xeb, 0x78, 0xe5,
	0xb2, 0x8a, 0xbc, 0x81, 0x8e, 0xc9, 0x7b, 0x84, 0xff, 0x0a, 0x16, 0xcb, 0x98, 0x66, 0x18, 0xac,
	0xfa, 0xf2, 0x08, 0x83, 0x6d, 0x73, 0x0d, 0xd0, 0x45, 0x09, 0xfb, 0x1f, 0xa1, 0x9d, 0x61, 0xc9,
	0x27, 0x84, 0x87, 0x6a, 0x3b, 0x66, 0x29, 0xd4, 0x98, 0xa6, 0x7f, 0x4b, 0xec, 0xea, 0x05, 0xa3,
	0x81, 0xea, 0x9e, 0xa4, 0x5a, 0x25, 0xb7, 0x58, 0xe8, 0xc7, 0x08, 0xab, 0xd4, 0x00, 0x8f, 0x59,
	0x25, 0x70, 0xd8, 0x1f, 0x93, 0x37, 0x08, 0x8f, 0xf8, 0x65, 0xab, 0x66, 0x2e, 0x85, 0x5a, 0xd3,
	0x05, 0xae, 0xe2, 0xf4, 0xa5, 0x73, 0x12, 0x37, 0x49, 0x12, 0xe1, 0xb8, 0xe4, 0x2b, 0xc2, 0xa4,
	0xf5, 0x6f, 0x49, 0x56, 0x42, 0xcd, 0x69, 0x7b, 0x04, 0xc5, 0x6e, 0x76, 0x9d, 0x07, 0xbc, 0xab,
	0x92, 0xf7, 0x3a, 0x49, 0xb3, 0x8b, 0x7e, 0xc6, 0xb1, 0x4a, 0x1e, 0x8c, 0xfd, 0x82, 0xf0, 0xdf,
	0xad, 0xa5, 0xab, 0x16, 0xaf, 0x84, 0x9a, 0x76, 0x29, 0x19, 0xa1, 0x67, 0x22, 0x4d, 0x49, 0x19,
	0x57, 0xc8, 0xff, 0x17, 0x96, 0xb1, 0x76, 0xe3, 0xe4, 0x2c, 0x81, 0x4e, 0xcf, 0x12, 0xe8, 0xd7,
	0x59, 0x02, 0xbd, 0x3e, 0x4f, 0x44, 0x4e, 0xcf, 0x13, 0x91, 0x1f, 0xe7, 0x89, 0xc8, 0x93, 0x78,
	0x3d, 0xf3, 0x28, 0x50, 0xc5, 0x2d, 0x97, 0x84, 0x93, 0x8b, 0xca, 0xaf, 0xd8, 0xe5, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x64, 0xcf, 0x77, 0x75, 0xfd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ValidatorSet by index.
	ValidatorSet(ctx context.Context, in *QueryGetValidatorSetRequest, opts ...grpc.CallOption) (*QueryGetValidatorSetResponse, error)
	// Queries a list of ValidatorSet items.
	ValidatorSetAll(ctx context.Context, in *QueryAllValidatorSetRequest, opts ...grpc.CallOption) (*QueryAllValidatorSetResponse, error)
	// Queries a KeyShare by index.
	KeyShare(ctx context.Context, in *QueryGetKeyShareRequest, opts ...grpc.CallOption) (*QueryGetKeyShareResponse, error)
	// Queries a list of KeyShare items.
	KeyShareAll(ctx context.Context, in *QueryAllKeyShareRequest, opts ...grpc.CallOption) (*QueryAllKeyShareResponse, error)
	// Queries a list of AggregatedKeyShare items.
	AggregatedKeyShare(ctx context.Context, in *QueryGetAggregatedKeyShareRequest, opts ...grpc.CallOption) (*QueryGetAggregatedKeyShareResponse, error)
	AggregatedKeyShareAll(ctx context.Context, in *QueryAllAggregatedKeyShareRequest, opts ...grpc.CallOption) (*QueryAllAggregatedKeyShareResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorSet(ctx context.Context, in *QueryGetValidatorSetRequest, opts ...grpc.CallOption) (*QueryGetValidatorSetResponse, error) {
	out := new(QueryGetValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/ValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorSetAll(ctx context.Context, in *QueryAllValidatorSetRequest, opts ...grpc.CallOption) (*QueryAllValidatorSetResponse, error) {
	out := new(QueryAllValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/ValidatorSetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyShare(ctx context.Context, in *QueryGetKeyShareRequest, opts ...grpc.CallOption) (*QueryGetKeyShareResponse, error) {
	out := new(QueryGetKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/KeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyShareAll(ctx context.Context, in *QueryAllKeyShareRequest, opts ...grpc.CallOption) (*QueryAllKeyShareResponse, error) {
	out := new(QueryAllKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/KeyShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatedKeyShare(ctx context.Context, in *QueryGetAggregatedKeyShareRequest, opts ...grpc.CallOption) (*QueryGetAggregatedKeyShareResponse, error) {
	out := new(QueryGetAggregatedKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/AggregatedKeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregatedKeyShareAll(ctx context.Context, in *QueryAllAggregatedKeyShareRequest, opts ...grpc.CallOption) (*QueryAllAggregatedKeyShareResponse, error) {
	out := new(QueryAllAggregatedKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.fairyring.Query/AggregatedKeyShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ValidatorSet by index.
	ValidatorSet(context.Context, *QueryGetValidatorSetRequest) (*QueryGetValidatorSetResponse, error)
	// Queries a list of ValidatorSet items.
	ValidatorSetAll(context.Context, *QueryAllValidatorSetRequest) (*QueryAllValidatorSetResponse, error)
	// Queries a KeyShare by index.
	KeyShare(context.Context, *QueryGetKeyShareRequest) (*QueryGetKeyShareResponse, error)
	// Queries a list of KeyShare items.
	KeyShareAll(context.Context, *QueryAllKeyShareRequest) (*QueryAllKeyShareResponse, error)
	// Queries a list of AggregatedKeyShare items.
	AggregatedKeyShare(context.Context, *QueryGetAggregatedKeyShareRequest) (*QueryGetAggregatedKeyShareResponse, error)
	AggregatedKeyShareAll(context.Context, *QueryAllAggregatedKeyShareRequest) (*QueryAllAggregatedKeyShareResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ValidatorSet(ctx context.Context, req *QueryGetValidatorSetRequest) (*QueryGetValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSet not implemented")
}
func (*UnimplementedQueryServer) ValidatorSetAll(ctx context.Context, req *QueryAllValidatorSetRequest) (*QueryAllValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSetAll not implemented")
}
func (*UnimplementedQueryServer) KeyShare(ctx context.Context, req *QueryGetKeyShareRequest) (*QueryGetKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyShare not implemented")
}
func (*UnimplementedQueryServer) KeyShareAll(ctx context.Context, req *QueryAllKeyShareRequest) (*QueryAllKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyShareAll not implemented")
}
func (*UnimplementedQueryServer) AggregatedKeyShare(ctx context.Context, req *QueryGetAggregatedKeyShareRequest) (*QueryGetAggregatedKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedKeyShare not implemented")
}
func (*UnimplementedQueryServer) AggregatedKeyShareAll(ctx context.Context, req *QueryAllAggregatedKeyShareRequest) (*QueryAllAggregatedKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedKeyShareAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/ValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorSet(ctx, req.(*QueryGetValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorSetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorSetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/ValidatorSetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorSetAll(ctx, req.(*QueryAllValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/KeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyShare(ctx, req.(*QueryGetKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/KeyShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyShareAll(ctx, req.(*QueryAllKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatedKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAggregatedKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatedKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/AggregatedKeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatedKeyShare(ctx, req.(*QueryGetAggregatedKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregatedKeyShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAggregatedKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregatedKeyShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.fairyring.Query/AggregatedKeyShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregatedKeyShareAll(ctx, req.(*QueryAllAggregatedKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.fairyring.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ValidatorSet",
			Handler:    _Query_ValidatorSet_Handler,
		},
		{
			MethodName: "ValidatorSetAll",
			Handler:    _Query_ValidatorSetAll_Handler,
		},
		{
			MethodName: "KeyShare",
			Handler:    _Query_KeyShare_Handler,
		},
		{
			MethodName: "KeyShareAll",
			Handler:    _Query_KeyShareAll_Handler,
		},
		{
			MethodName: "AggregatedKeyShare",
			Handler:    _Query_AggregatedKeyShare_Handler,
		},
		{
			MethodName: "AggregatedKeyShareAll",
			Handler:    _Query_AggregatedKeyShareAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/fairyring/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorSet) > 0 {
		for iNdEx := len(m.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KeyShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyShare) > 0 {
		for iNdEx := len(m.KeyShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregatedKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregatedKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregatedKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAggregatedKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAggregatedKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAggregatedKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AggregatedKeyShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAggregatedKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAggregatedKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAggregatedKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAggregatedKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAggregatedKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAggregatedKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AggregatedKeyShare) > 0 {
		for iNdEx := len(m.AggregatedKeyShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregatedKeyShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValidatorSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorSet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidatorSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for _, e := range m.ValidatorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryGetKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KeyShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyShare) > 0 {
		for _, e := range m.KeyShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAggregatedKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetAggregatedKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AggregatedKeyShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAggregatedKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAggregatedKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatedKeyShare) > 0 {
		for _, e := range m.AggregatedKeyShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSet = append(m.ValidatorSet, ValidatorSet{})
			if err := m.ValidatorSet[len(m.ValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyShare = append(m.KeyShare, KeyShare{})
			if err := m.KeyShare[len(m.KeyShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregatedKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregatedKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregatedKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAggregatedKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAggregatedKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAggregatedKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregatedKeyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAggregatedKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAggregatedKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAggregatedKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAggregatedKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAggregatedKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAggregatedKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatedKeyShare = append(m.AggregatedKeyShare, AggregatedKeyShare{})
			if err := m.AggregatedKeyShare[len(m.AggregatedKeyShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
